// margin and mini map focus heights
let margin = { top: 20, right: 30, bottom: 80, left: 60 },
  width = 860 - margin.left - margin.right,
  height = 300 - margin.top - margin.bottom;
marginFocus = { bottom: 10 };
focusHeight = 100;

let exeKey = 'executions';

d3.json('test_prime_20.json').then(function (data) {
  data = data[exeKey];

  console.log(data);

  // function for bars
  let bars = (g, x, y, data) => {
    g.attr('fill', 'steelblue')
      .selectAll('rect')
      .data(data, (d) => d.executions)
      .join('rect')
      .attr('x', (d) => x(d.iteration))
      .attr('y', (d) => y(d.duration))
      .attr('height', (d) => y(0) - y(d.duration))
      .attr('width', x.bandwidth())
      .append('title');
  };

  // y axis
  let yAxis = (g, y) => {
    g.attr('transform', `translate(${margin.left},0)`)
      .call(d3.axisLeft(y))
      .call((g) => g.select('.domain').remove());
  };
  // x axis
  let xAxis = (g, x, height) => {
    g.attr('transform', `translate(0,${height - margin.bottom})`).call(
      d3
        .axisBottom(x)
        .tickFormat((i) => (x.domain().length < 90 ? data[i].iteration : null)) // hide labels when x domain becomes too wide
        .tickSizeOuter(0)
    );
  };

  // x scale
  x = d3
    .scaleBand()
    // .domain(d3.range(data.length))
    .domain(data.map((d) => d.iteration))
    .range([margin.left, width - margin.right])
    .padding(0.2);

  // y scale
  y = d3
    .scaleLinear()
    .domain([0, d3.max(data, (d) => d.duration + 10)])
    .nice()
    .range([height - margin.bottom, margin.top]);

  // const svg = d3.create('svg').attr('viewBox', [0, 0, width, height]);
  const svg = d3
    .select('#focusGraph') // div to be attached to
    .append('svg')
    .attr('viewBox', [0, 0, width, height]);
  // const gx = svg.append('g');

  // const gy = svg.append('g');

  const barGroup = svg.append('g').call((g) => bars(g, x, y, data));

  svg.append('g').call(xAxis(svg, x, height));
  // svg.append('g').attr('class', 'x-axis').call(g)=>xAxis(svg, x, height));

  svg
    .append('g')
    .attr('class', 'y-axis')
    .call(yAxis((svg, y)));
});
